# Resumen del Esquema y Datos Muestra de la Base de Datos PostgreSQL (Schema: public) para Referencia de LLM

## ENUM Types

### public.tipo_local_enum
- Define los tipos válidos para la columna `tipo_local` en la tabla `locais`.
- Valores Posibles:
  - 'AMBIENTE_INTERNO_APARTAMENTO'
  - 'AREA_COMUM_INTERNA_BLOCO'
  - 'AREA_COMUM_FACHADA_BLOCO'
  - 'AREA_COMUM_EXTERNA_BLOCO'
  - 'AREA_COMUM_MODULO'
  - 'RUA'

## Estructura Jerárquica Principal y Datos Muestra

### public.obras
- Representa las obras o proyectos principales.
- **Columnas:**
  - `obra_id` (BIGINT, PK, GENERATED BY DEFAULT AS IDENTITY, NOT NULL) - ID único de la obra.
  - `nome` (TEXT, NOT NULL) - Nombre de la obra.
- **Datos:**
  - (1, 'ML1')
  - (2, 'ML2')

### public.modulos
- Representa los módulos dentro de una obra.
- **Columnas:**
  - `id` (BIGINT, PK, GENERATED BY DEFAULT AS IDENTITY, NOT NULL) - ID único del módulo.
  - `nome` (TEXT, NOT NULL) - Nombre del módulo.
  - `obra_id` (BIGINT, FK -> obras.obra_id, NOT NULL) - ID de la obra a la que pertenece.
  - `created_at` (TIMESTAMPTZ, NOT NULL, DEFAULT now()) - Timestamp de creación.
- **Constraints:**
  - `unique_obra_nome` (UNIQUE(obra_id, nome)) - Nombre del módulo debe ser único dentro de la obra.
- **Datos:**
  - (1, '01', 2, '2025-05-05 19:26:51.404915+00')
  - (2, '02', 2, '2025-05-05 19:26:51.404915+00')
  - (3, '03', 2, '2025-05-05 19:26:51.404915+00')
  - (4, '04', 2, '2025-05-05 19:26:51.404915+00')
  - (5, '05', 2, '2025-05-05 19:26:51.404915+00')
  - (6, '06', 2, '2025-05-05 19:26:51.404915+00')

### public.blocos
- Representa los bloques dentro de un módulo.
- **Columnas:**
  - `id` (BIGINT, PK, GENERATED BY DEFAULT AS IDENTITY, NOT NULL) - ID único del bloco.
  - `nome` (TEXT, NOT NULL) - Nombre del bloco.
  - `modulo_id` (BIGINT, FK -> modulos.id, NOT NULL) - ID del módulo al que pertenece.
  - `created_at` (TIMESTAMPTZ, NOT NULL, DEFAULT now()) - Timestamp de creación.
- **Constraints:**
  - `unique_modulo_nome` (UNIQUE(modulo_id, nome)) - Nombre del bloco debe ser único dentro del módulo.
- **Datos (Muestra):**
  - (1, '01', 6, '2025-05-05 19:39:23.595159+00')
  - (2, '02', 6, '2025-05-05 19:39:23.595159+00')
  - (3, '03', 6, '2025-05-05 19:39:23.595159+00')
  - (4, '04', 6, '2025-05-05 19:39:23.595159+00')
  - (5, '05', 6, '2025-05-05 19:39:23.595159+00')
  - (6, '06', 6, '2025-05-05 19:39:23.595159+00')
  - (7, '07', 1, '2025-05-05 19:39:23.595159+00')
  - (8, '08', 1, '2025-05-05 19:39:23.595159+00')
  - (9, '09', 1, '2025-05-05 19:39:23.595159+00')
  - (10, '10', 1, '2025-05-05 19:39:23.595159+00')
  - (... más datos)

### public.pavimentos
- Representa los pisos o pavimentos dentro de un bloco.
- **Columnas:**
  - `id` (BIGINT, PK, GENERATED BY DEFAULT AS IDENTITY, NOT NULL) - ID único del pavimento.
  - `nome` (TEXT, NOT NULL) - Nombre/Número del pavimento (ej: 'Térreo', '1', '2').
  - `bloco_id` (BIGINT, FK -> blocos.id, NOT NULL) - ID del bloco al que pertenece.
  - `created_at` (TIMESTAMPTZ, NOT NULL, DEFAULT now()) - Timestamp de creación.
- **Constraints:**
  - `unique_bloco_nome` (UNIQUE(bloco_id, nome)) - Nombre del pavimento debe ser único dentro del bloco.
- **Datos (Muestra):**
  - (1, '01', 1, '2025-05-05 19:44:05.186598+00')
  - (2, '02', 1, '2025-05-05 19:44:05.186598+00')
  - (3, '03', 1, '2025-05-05 19:44:05.186598+00')
  - (4, '04', 1, '2025-05-05 19:44:05.186598+00')
  - (5, '01', 2, '2025-05-05 19:44:05.186598+00')
  - (6, '02', 2, '2025-05-05 19:44:05.186598+00')
  - (7, '03', 2, '2025-05-05 19:44:05.186598+00')
  - (8, '04', 2, '2025-05-05 19:44:05.186598+00')
  - (9, '01', 3, '2025-05-05 19:44:05.186598+00')
  - (10, '02', 3, '2025-05-05 19:44:05.186598+00')
  - (... más datos)

### public.apartamentos
- Representa los apartamentos o unidades dentro de un pavimento.
- **Columnas:**
  - `id` (BIGINT, PK, GENERATED BY DEFAULT AS IDENTITY, NOT NULL) - ID único del apartamento.
  - `nome` (TEXT, NOT NULL) - Nombre/Número del apartamento (ej: '101', '205B').
  - `pavimento_id` (BIGINT, FK -> pavimentos.id, NOT NULL) - ID del pavimento al que pertenece.
  - `created_at` (TIMESTAMPTZ, NOT NULL, DEFAULT now()) - Timestamp de creación.
- **Constraints:**
  - `unique_pavimento_nome` (UNIQUE(pavimento_id, nome)) - Nombre del apartamento debe ser único dentro del pavimento.
- **Datos (Muestra):**
  - (1, '101', 1, '2025-05-05 19:47:07.419452+00')
  - (2, '102', 1, '2025-05-05 19:47:07.419452+00')
  - (3, '103', 1, '2025-05-05 19:47:07.419452+00')
  - (4, '104', 1, '2025-05-05 19:47:07.419452+00')
  - (5, '201', 2, '2025-05-05 19:47:07.419452+00')
  - (6, '202', 2, '2025-05-05 19:47:07.419452+00')
  - (7, '203', 2, '2025-05-05 19:47:07.419452+00')
  - (8, '204', 2, '2025-05-05 19:47:07.419452+00')
  - (9, '301', 3, '2025-05-05 19:47:07.419452+00')
  - (10, '302', 3, '2025-05-05 19:47:07.419452+00')
  - (... más datos)

## Estructura de Locais (Polimórfica) y Datos Muestra

### public.locais (Tabla Base)
- Tabla central para todas las ubicaciones. Contiene datos comunes.
- **Columnas:**
  - `id` (BIGINT, PK, GENERATED BY DEFAULT AS IDENTITY, NOT NULL) - ID único para CUALQUIER tipo de local.
  - `tipo_local` (public.tipo_local_enum, NOT NULL) - **Discriminador**. Indica qué tabla específica contiene los detalles.
  - `nome_display` (VARCHAR(350), NOT NULL) - Nombre descriptivo completo para mostrar.
  - `obra_id` (BIGINT, FK -> obras.obra_id, NOT NULL, ON DELETE RESTRICT) - ID de la obra a la que pertenece el local.
  - `created_at` (TIMESTAMPTZ, NOT NULL, DEFAULT now()) - Timestamp de creación.
- **Datos:** (Actualmente vacía según el dump)

### public.local_ambiente_interno_apartamento (Tipo Específico)
- Detalles para locales de tipo 'AMBIENTE_INTERNO_APARTAMENTO'.
- **Columnas:**
  - `local_id` (BIGINT, PK, FK -> locais.id, ON DELETE CASCADE) - ID que vincula a la tabla base `locais`.
  - `apartamento_id` (BIGINT, FK -> apartamentos.id, NOT NULL, ON DELETE CASCADE) - ID del apartamento al que pertenece este ambiente.
  - `nome_ambiente` (VARCHAR(150), NOT NULL) - Nombre del ambiente (ej: 'Sala', 'Cozinha').
- **Datos:** (Actualmente vacía según el dump)

### public.local_area_comum_interna_bloco (Tipo Específico)
- Detalles para locales de tipo 'AREA_COMUM_INTERNA_BLOCO'.
- **Columnas:**
  - `local_id` (BIGINT, PK, FK -> locais.id, ON DELETE CASCADE) - ID que vincula a la tabla base `locais`.
  - `bloco_id` (BIGINT, FK -> blocos.id, NOT NULL, ON DELETE CASCADE) - ID del bloco al que pertenece esta área.
  - `nome_area` (VARCHAR(150), NOT NULL) - Nombre del área común interna (ej: 'Escadaria', 'Hall Pavimento 3').
- **Datos:** (Actualmente vacía según el dump)

### public.local_area_comum_fachada_bloco (Tipo Específico)
- Detalles para locales de tipo 'AREA_COMUM_FACHADA_BLOCO'.
- **Columnas:**
  - `local_id` (BIGINT, PK, FK -> locais.id, ON DELETE CASCADE) - ID que vincula a la tabla base `locais`.
  - `bloco_id` (BIGINT, FK -> blocos.id, NOT NULL, ON DELETE CASCADE) - ID del bloco al que pertenece esta fachada.
  - `pano_vertical` (VARCHAR(100), NOT NULL) - Identificador de la sección vertical.
  - `pavimento_referencia` (VARCHAR(50), NOT NULL) - Pavimento(s) asociados a esta sección.
- **Datos:** (Actualmente vacía según el dump)

### public.local_area_comum_externa_bloco (Tipo Específico)
- Detalles para locales de tipo 'AREA_COMUM_EXTERNA_BLOCO'.
- **Columnas:**
  - `local_id` (BIGINT, PK, FK -> locais.id, ON DELETE CASCADE) - ID que vincula a la tabla base `locais`.
  - `bloco_id` (BIGINT, FK -> blocos.id, NOT NULL, ON DELETE CASCADE) - ID del bloco al que pertenece esta área externa.
  - `nome_area` (VARCHAR(150), NOT NULL) - Nombre del área común externa (ej: 'Calçada Bloco 5').
- **Datos:** (Actualmente vacía según el dump)

### public.local_area_comum_modulo (Tipo Específico)
- Detalles para locales de tipo 'AREA_COMUM_MODULO'.
- **Columnas:**
  - `local_id` (BIGINT, PK, FK -> locais.id, ON DELETE CASCADE) - ID que vincula a la tabla base `locais`.
  - `modulo_id` (BIGINT, FK -> modulos.id, NOT NULL, ON DELETE CASCADE) - ID del módulo al que pertenece esta área.
  - `nome_area` (VARCHAR(150), NOT NULL) - Nombre del área común del módulo (ej: 'Entrada Principal Modulo 2').
- **Datos:** (Actualmente vacía según el dump)

### public.local_rua (Tipo Específico)
- Detalles para locales de tipo 'RUA'.
- **Columnas:**
  - `local_id` (BIGINT, PK, FK -> locais.id, ON DELETE CASCADE) - ID que vincula a la tabla base `locais`.
  - `nome_rua` (VARCHAR(255), NOT NULL) - Nombre de la calle.
- **Datos:** (Actualmente vacía según el dump)

## Otras Tablas Principales y Datos Muestra

### public.tipos_tarefas
- Define los diferentes tipos de tareas que se pueden realizar.
- **Columnas:**
  - `id` (BIGINT, PK, GENERATED BY DEFAULT AS IDENTITY, NOT NULL) - ID único del tipo de tarefa.
  - `nome` (VARCHAR(255), NOT NULL, UNIQUE) - Nombre del tipo de tarefa.
  - `created_at` (TIMESTAMPTZ, NOT NULL, DEFAULT now()) - Timestamp de creación.
  - `funcao` (TEXT, NULL) - Posible función asociada (ej: 'PINTOR').
- **Datos:**
  - (1, 'Massa e 1º demão', '2025-05-05 21:56:51.457786+00', 'PINTOR')
  - (2, '2ª Demão', '2025-05-05 21:56:51.457786+00', 'PINTOR')

### public.responsaveis
- Almacena información sobre los trabajadores o responsables.
- **Columnas:**
  - `id` (BIGINT, PK, GENERATED BY DEFAULT AS IDENTITY, NOT NULL) - ID único del responsável.
  - `nome` (TEXT, NOT NULL, UNIQUE) - Nombre del responsável.
  - `matricula` (NUMERIC, NULL) - Matrícula del funcionário.
  - `funcao` (TEXT, NULL) - Cargo/Función.
  - `data_admissao` (DATE, NULL) - Fecha de admisión.
  - `situacao` (TEXT, NULL) - Situación (ej: 'Ativo', 'Afastado').
  - `salario_categoria` (NUMERIC, NULL) - Salario base.
  - `obra_id` (BIGINT, FK -> obras.obra_id, NULL) - Obra principal a la que está asociado (opcional).
- **Datos (Muestra):**
  - (61, 'ADEMIR ALVES FILHO', 741, 'PINTOR', '2025-04-14', 'Ativo', 1821.64, 2)
  - (62, 'ALBERI DANTAS DA SILVA', 193, 'GESSEIRO', '2022-05-02', 'Ativo', 1821.64, 2)
  - (63, 'ALCIDES JONATAS DE CASTRO SILVA', 719, 'PINTOR', '2025-03-19', 'Ativo', 1821.64, 2)
  - (64, 'ALEXSANDRO DOS SANTOS', 385, 'AUXILIAR', '2023-10-12', 'Ativo', 1548.43, 2)
  - (65, 'ALMIRANTES PEREIRA DE ALMEIDA', 576, 'ENCANADOR', '2024-07-15', 'Ativo', 1821.64, 2)
  - (66, 'ALVARO EDINARDO DA SILVA SANTOS', 681, 'PINTOR', '2025-01-14', 'Ativo', 1821.64, 2)
  - (67, 'ANA PAULA DANTAS DA SILVA', 277, 'AUXILIAR', '2023-03-20', 'Ativo', 1548.43, 2)
  - (68, 'ANCHERLEY CABRAL CALISTO', 619, 'PINTOR', '2023-10-09', 'Ativo', 1821.64, 2)
  - (69, 'ANDRE FRANCISCO DE SOUZA', 634, 'GESSEIRO', '2024-10-14', 'Ativo', 1821.64, 2)
  - (70, 'ANDSON CARLOS SILVA DE MELO', 649, 'PEDREIRO', '2023-10-09', 'Ativo', 1821.64, 2)
  - (... más datos)

### public.precos_tarefa_local
- Almacena los precios estándar para una combinación de tipo de tarefa y local.
- **Columnas:**
  - `id` (BIGINT, PK, GENERATED BY DEFAULT AS IDENTITY, NOT NULL) - ID único del registro de precio.
  - `tipos_tarefa_id` (BIGINT, FK -> tipos_tarefas.id, NOT NULL, ON DELETE CASCADE) - ID del tipo de tarefa.
  - `local_id` (BIGINT, FK -> locais.id, NOT NULL, ON DELETE CASCADE) - ID del local.
  - `preco` (NUMERIC(12, 2), NOT NULL, CHECK preco >= 0) - Precio para la combinación.
  - `unidade_medida` (VARCHAR(50), NULL) - Unidad (ej: 'm²', 'unidade', 'hora').
  - `validade_inicio` (DATE, NULL, DEFAULT CURRENT_DATE) - Inicio de validez del precio.
  - `validade_fim` (DATE, NULL) - Fin de validez (NULL = vigente).
  - `created_at` (TIMESTAMPTZ, NOT NULL, DEFAULT now()) - Timestamp de creación.
- **Constraints:**
  - `uq_preco_tipo_local_unidade` (UNIQUE(tipos_tarefa_id, local_id, unidade_medida)) - Evita duplicados exactos (podría necesitar ajuste para fechas).
- **Datos:** (Actualmente vacía según el dump)

### public.tarefas
- Tabla principal que registra las tareas a realizar.
- **Columnas:**
  - `id` (BIGINT, PK, GENERATED BY DEFAULT AS IDENTITY, NOT NULL) - ID único de la tarefa.
  - `nome` (TEXT, NOT NULL) - Nombre o descripción corta de la tarefa.
  - `created_at` (TIMESTAMPTZ, NOT NULL, DEFAULT now()) - Timestamp de creación.
  - `inicio` (DATE, NULL) - Fecha de inicio.
  - `fim` (DATE, NULL) - Fecha de fin.
  - `local_id` (BIGINT, FK -> locais.id, NULL, ON DELETE SET NULL) - ID del local donde se realiza la tarefa.
  - `tipos_tarefa_id` (BIGINT, FK -> tipos_tarefas.id, NULL, ON DELETE SET NULL) - ID del tipo de tarefa.
  - `preco_tarefa_local_id` (BIGINT, FK -> precos_tarefa_local.id, NULL, ON DELETE SET NULL) - ID de referencia al precio estándar aplicable.
- **Datos:** (Actualmente vacía según el dump)

## Tablas de Relación (Many-to-Many) y Datos Muestra

### public.tarefa_responsaveis
- Tabla de junção que conecta tarefas com seus múltiplos responsáveis e armazena detalhes da atribuição.
- **Columnas:**
  - `tarefa_id` (BIGINT, PK part, FK -> tarefas.id, NOT NULL, ON DELETE CASCADE) - ID da tarefa.
  - `responsavel_id` (BIGINT, PK part, FK -> responsaveis.id, NOT NULL, ON DELETE CASCADE) - ID do responsável.
  - `percentual` (NUMERIC(5, 2), NOT NULL, DEFAULT 100.00, CHECK > 0 AND <= 100.00) - Percentual de responsabilidade nesta tarefa.
  - `eh_principal` (BOOLEAN, NOT NULL, DEFAULT FALSE) - Indica se é o responsável principal.
- **Constraints:**
  - `tarefa_responsaveis_pkey` (PRIMARY KEY(tarefa_id, responsavel_id)) - Garante associação única.
- **Nota:** A validação da soma dos `percentual` para 100% por `tarefa_id` é feita por Trigger (não visível apenas no `CREATE TABLE`).
- **Datos:** (Actualmente vacía según el dump)

## Funciones y Triggers Notables

- `public.checar_soma_100_tarefa(BIGINT)`: Función que verifica si la suma de `percentual` en `tarefa_responsaveis` es 100 para una `tarefa_id` dada.
- `public.trigger_checar_soma_100_tarefa()`: Función de Trigger que llama a la función de verificación.
- `trig_checar_soma_100` en `tarefa_responsaveis`: CONSTRAINT TRIGGER que usa las funciones anteriores para forzar la suma de 100% no `COMMIT` da transação.

## Resumen de Relaciones Clave para Consultas

- **Jerarquía:** `obras` -> `modulos` -> `blocos` -> `pavimentos` -> `apartamentos`.
- **Localización:**
  - `tarefas.local_id` -> `locais.id` (Obtiene información común del local y el `tipo_local`).
  - Dependiendo de `locais.tipo_local`, hacer JOIN con la tabla específica correspondiente (`local_ambiente_interno_apartamento`, `local_rua`, etc.) usando `locais.id = tabla_especifica.local_id`.
  - Para obtener la jerarquía completa de un local, hacer JOIN desde `locais.obra_id` y/o desde las FKs nas tabelas específicas (`apartamento_id`, `bloco_id`, `modulo_id`).
- **Responsables:**
  - `tarefas` -> `tarefa_responsaveis` (JOIN en `tarefas.id = tarefa_responsaveis.tarefa_id`).
  - `tarefa_responsaveis` -> `responsaveis` (JOIN en `tarefa_responsaveis.responsavel_id = responsaveis.id`).
- **Tipo de Tarefa:** `tarefas.tipos_tarefa_id` -> `tipos_tarefas.id`.
- **Precio Estándar:** `tarefas.preco_tarefa_local_id` -> `precos_tarefa_local.id`. Para obtener los detalles del precio (tipo y local a los que se aplica), hacer JOIN adicional desde `precos_tarefa_local` para `tipos_tarefas` y `locais`.

